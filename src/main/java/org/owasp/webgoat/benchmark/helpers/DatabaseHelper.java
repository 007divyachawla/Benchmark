package org.owasp.webgoat.benchmark.helpers;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class DatabaseHelper {
	private static Statement stmt;
	private static Connection conn;

	static {
		initData();
	}

	public static java.sql.Statement getSqlStatement() {
		if (conn == null) {
			getSqlConnection();
		}

		if (stmt == null) {
			try {
				stmt = conn.createStatement();
			} catch (SQLException e) {
				System.out.println("Problem with database init.");
			}
		}

		return stmt;
	}

	public static java.sql.Connection getSqlConnection() {
		if (conn == null) {
			try {
				Class.forName("org.hsqldb.jdbcDriver");
				String url = "jdbc:hsqldb:benchmarkDataBase;sql.enforce_size=false";
				conn = DriverManager.getConnection(url, "sa", "");
			} catch (SQLException | ClassNotFoundException e) {
				System.out.println("Problem with database init.");
			}
		}
		return conn;
		// return org.mockito.Mockito.mock(java.sql.Connection.class);
	}

	private static void initData() {
		try {
			executeSQLCommand("DROP PROCEDURE IF EXISTS verifyUserPassword");
			executeSQLCommand("DROP TABLE IF EXISTS USERS");
			executeSQLCommand("DROP TABLE IF EXISTS EMPLOYEE");
			executeSQLCommand("DROP TABLE IF EXISTS CERTIFICATE");

			executeSQLCommand("CREATE TABLE USERS (userid int NOT NULL GENERATED BY DEFAULT AS IDENTITY, username varchar(50), password varchar(50),PRIMARY KEY (userid));");
			executeSQLCommand("CREATE PROCEDURE verifyUserPassword(IN username_ varchar(50), IN password_ varchar(50))"
					+ " READS SQL DATA"
					+ " DYNAMIC RESULT SETS 1"
					+ " BEGIN ATOMIC"
					+ " DECLARE resultSet SCROLL CURSOR WITH HOLD WITH RETURN FOR SELECT * FROM USERS;" //WHERE USERNAME = user AND PASSWORD = pass;"
					+ " OPEN resultSet;"
					+"END;");

			executeSQLCommand("create table EMPLOYEE ("
					+ "	   id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,"
					+ "	   first_name VARCHAR(20) default NULL,"
					+ "   last_name  VARCHAR(20) default NULL,"
					+ " salary     INT  default NULL," + " PRIMARY KEY (id)"
					+ "	);");

			executeSQLCommand("create table CERTIFICATE ("
					+ "	   id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,"
					+ " certificate_name VARCHAR(30) default NULL,"
					+ " employee_id INT default NULL," + " PRIMARY KEY (id)"
					+ ");");
			
			executeSQLCommand("INSERT INTO USERS (username, password) VALUES('User01', 'P455w0rd')");
			executeSQLCommand("INSERT INTO USERS (username, password) VALUES('User02', 'B3nchM3rk')");
			executeSQLCommand("INSERT INTO USERS (username, password) VALUES('User03', 'a$c11')");
			executeSQLCommand("INSERT INTO USERS (username, password) VALUES('foo', 'bar')");

		} catch (Exception e1) {
			System.out.println("Problem with database init.");
		}
	}

	public static void executeSQLCommand(String sql) throws Exception {
		if (stmt == null) {
			getSqlStatement();
		}
		stmt.executeUpdate(sql);
	}

}
